// Code generated by MockGen. DO NOT EDIT.
// Source: internal/handlers/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/handlers/auth.go -destination=internal/handlers/mocks/auth.go -package=handlers_mocks
//

// Package handlers_mocks is a generated GoMock package.
package handlers_mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/OutOfStack/game-library-auth/internal/auth"
	model "github.com/OutOfStack/game-library-auth/internal/model"
	jwt "github.com/golang-jwt/jwt/v4"
	gomock "go.uber.org/mock/gomock"
	idtoken "google.golang.org/api/idtoken"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// CreateUserClaims mocks base method.
func (m *MockAuth) CreateUserClaims(user model.User) jwt.Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserClaims", user)
	ret0, _ := ret[0].(jwt.Claims)
	return ret0
}

// CreateUserClaims indicates an expected call of CreateUserClaims.
func (mr *MockAuthMockRecorder) CreateUserClaims(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserClaims", reflect.TypeOf((*MockAuth)(nil).CreateUserClaims), user)
}

// GenerateToken mocks base method.
func (m *MockAuth) GenerateToken(claims jwt.Claims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthMockRecorder) GenerateToken(claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuth)(nil).GenerateToken), claims)
}

// ValidateToken mocks base method.
func (m *MockAuth) ValidateToken(tokenStr string) (auth.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenStr)
	ret0, _ := ret[0].(auth.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockAuthMockRecorder) ValidateToken(tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockAuth)(nil).ValidateToken), tokenStr)
}

// MockGoogleTokenValidator is a mock of GoogleTokenValidator interface.
type MockGoogleTokenValidator struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleTokenValidatorMockRecorder
	isgomock struct{}
}

// MockGoogleTokenValidatorMockRecorder is the mock recorder for MockGoogleTokenValidator.
type MockGoogleTokenValidatorMockRecorder struct {
	mock *MockGoogleTokenValidator
}

// NewMockGoogleTokenValidator creates a new mock instance.
func NewMockGoogleTokenValidator(ctrl *gomock.Controller) *MockGoogleTokenValidator {
	mock := &MockGoogleTokenValidator{ctrl: ctrl}
	mock.recorder = &MockGoogleTokenValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleTokenValidator) EXPECT() *MockGoogleTokenValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockGoogleTokenValidator) Validate(ctx context.Context, idToken, audience string) (*idtoken.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, idToken, audience)
	ret0, _ := ret[0].(*idtoken.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockGoogleTokenValidatorMockRecorder) Validate(ctx, idToken, audience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockGoogleTokenValidator)(nil).Validate), ctx, idToken, audience)
}

// MockUserFacade is a mock of UserFacade interface.
type MockUserFacade struct {
	ctrl     *gomock.Controller
	recorder *MockUserFacadeMockRecorder
	isgomock struct{}
}

// MockUserFacadeMockRecorder is the mock recorder for MockUserFacade.
type MockUserFacadeMockRecorder struct {
	mock *MockUserFacade
}

// NewMockUserFacade creates a new mock instance.
func NewMockUserFacade(ctrl *gomock.Controller) *MockUserFacade {
	mock := &MockUserFacade{ctrl: ctrl}
	mock.recorder = &MockUserFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFacade) EXPECT() *MockUserFacadeMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserFacade) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserFacadeMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserFacade)(nil).DeleteUser), ctx, userID)
}

// GoogleOAuth mocks base method.
func (m *MockUserFacade) GoogleOAuth(ctx context.Context, oauthID, email string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleOAuth", ctx, oauthID, email)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoogleOAuth indicates an expected call of GoogleOAuth.
func (mr *MockUserFacadeMockRecorder) GoogleOAuth(ctx, oauthID, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleOAuth", reflect.TypeOf((*MockUserFacade)(nil).GoogleOAuth), ctx, oauthID, email)
}

// ResendVerificationEmail mocks base method.
func (m *MockUserFacade) ResendVerificationEmail(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResendVerificationEmail", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResendVerificationEmail indicates an expected call of ResendVerificationEmail.
func (mr *MockUserFacadeMockRecorder) ResendVerificationEmail(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResendVerificationEmail", reflect.TypeOf((*MockUserFacade)(nil).ResendVerificationEmail), ctx, userID)
}

// SignIn mocks base method.
func (m *MockUserFacade) SignIn(ctx context.Context, username, password string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, username, password)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserFacadeMockRecorder) SignIn(ctx, username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUserFacade)(nil).SignIn), ctx, username, password)
}

// SignUp mocks base method.
func (m *MockUserFacade) SignUp(ctx context.Context, username, displayName, email, password string, isPublisher bool) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, username, displayName, email, password, isPublisher)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserFacadeMockRecorder) SignUp(ctx, username, displayName, email, password, isPublisher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUserFacade)(nil).SignUp), ctx, username, displayName, email, password, isPublisher)
}

// UpdateUserProfile mocks base method.
func (m *MockUserFacade) UpdateUserProfile(ctx context.Context, userID string, params model.UpdateProfileParams) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserProfile", ctx, userID, params)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserProfile indicates an expected call of UpdateUserProfile.
func (mr *MockUserFacadeMockRecorder) UpdateUserProfile(ctx, userID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserProfile", reflect.TypeOf((*MockUserFacade)(nil).UpdateUserProfile), ctx, userID, params)
}

// VerifyEmail mocks base method.
func (m *MockUserFacade) VerifyEmail(ctx context.Context, userID, code string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmail", ctx, userID, code)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmail indicates an expected call of VerifyEmail.
func (mr *MockUserFacadeMockRecorder) VerifyEmail(ctx, userID, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmail", reflect.TypeOf((*MockUserFacade)(nil).VerifyEmail), ctx, userID, code)
}
