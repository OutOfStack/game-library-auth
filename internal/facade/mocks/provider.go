// Code generated by MockGen. DO NOT EDIT.
// Source: internal/facade/provider.go
//
// Generated by this command:
//
//	mockgen -source=internal/facade/provider.go -destination=internal/facade/mocks/provider.go -package=facade_mocks
//

// Package facade_mocks is a generated GoMock package.
package facade_mocks

import (
	context "context"
	reflect "reflect"

	mailersend "github.com/OutOfStack/game-library-auth/internal/client/mailersend"
	database "github.com/OutOfStack/game-library-auth/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
	isgomock struct{}
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// CheckUserExists mocks base method.
func (m *MockUserRepo) CheckUserExists(ctx context.Context, name string, role database.Role) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", ctx, name, role)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockUserRepoMockRecorder) CheckUserExists(ctx, name, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockUserRepo)(nil).CheckUserExists), ctx, name, role)
}

// CreateEmailVerification mocks base method.
func (m *MockUserRepo) CreateEmailVerification(ctx context.Context, verification database.EmailVerification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmailVerification", ctx, verification)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmailVerification indicates an expected call of CreateEmailVerification.
func (mr *MockUserRepoMockRecorder) CreateEmailVerification(ctx, verification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmailVerification", reflect.TypeOf((*MockUserRepo)(nil).CreateEmailVerification), ctx, verification)
}

// CreateUser mocks base method.
func (m *MockUserRepo) CreateUser(ctx context.Context, user database.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepoMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepo)(nil).CreateUser), ctx, user)
}

// DeleteUser mocks base method.
func (m *MockUserRepo) DeleteUser(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepoMockRecorder) DeleteUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepo)(nil).DeleteUser), ctx, userID)
}

// GetEmailVerificationByUserID mocks base method.
func (m *MockUserRepo) GetEmailVerificationByUserID(ctx context.Context, userID string) (database.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailVerificationByUserID", ctx, userID)
	ret0, _ := ret[0].(database.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailVerificationByUserID indicates an expected call of GetEmailVerificationByUserID.
func (mr *MockUserRepoMockRecorder) GetEmailVerificationByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailVerificationByUserID", reflect.TypeOf((*MockUserRepo)(nil).GetEmailVerificationByUserID), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepo) GetUserByEmail(ctx context.Context, email string) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepoMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepo)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockUserRepo) GetUserByID(ctx context.Context, userID string) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, userID)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepoMockRecorder) GetUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepo)(nil).GetUserByID), ctx, userID)
}

// GetUserByOAuth mocks base method.
func (m *MockUserRepo) GetUserByOAuth(ctx context.Context, provider, oauthID string) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByOAuth", ctx, provider, oauthID)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByOAuth indicates an expected call of GetUserByOAuth.
func (mr *MockUserRepoMockRecorder) GetUserByOAuth(ctx, provider, oauthID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByOAuth", reflect.TypeOf((*MockUserRepo)(nil).GetUserByOAuth), ctx, provider, oauthID)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepo) GetUserByUsername(ctx context.Context, username string) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepoMockRecorder) GetUserByUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepo)(nil).GetUserByUsername), ctx, username)
}

// RunWithTx mocks base method.
func (m *MockUserRepo) RunWithTx(ctx context.Context, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunWithTx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunWithTx indicates an expected call of RunWithTx.
func (mr *MockUserRepoMockRecorder) RunWithTx(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunWithTx", reflect.TypeOf((*MockUserRepo)(nil).RunWithTx), ctx, f)
}

// SetEmailVerificationMessageID mocks base method.
func (m *MockUserRepo) SetEmailVerificationMessageID(ctx context.Context, verificationID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmailVerificationMessageID", ctx, verificationID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEmailVerificationMessageID indicates an expected call of SetEmailVerificationMessageID.
func (mr *MockUserRepoMockRecorder) SetEmailVerificationMessageID(ctx, verificationID, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmailVerificationMessageID", reflect.TypeOf((*MockUserRepo)(nil).SetEmailVerificationMessageID), ctx, verificationID, messageID)
}

// SetEmailVerificationUsed mocks base method.
func (m *MockUserRepo) SetEmailVerificationUsed(ctx context.Context, id string, verified bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmailVerificationUsed", ctx, id, verified)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEmailVerificationUsed indicates an expected call of SetEmailVerificationUsed.
func (mr *MockUserRepoMockRecorder) SetEmailVerificationUsed(ctx, id, verified any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmailVerificationUsed", reflect.TypeOf((*MockUserRepo)(nil).SetEmailVerificationUsed), ctx, id, verified)
}

// SetUserEmailVerified mocks base method.
func (m *MockUserRepo) SetUserEmailVerified(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserEmailVerified", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserEmailVerified indicates an expected call of SetUserEmailVerified.
func (mr *MockUserRepoMockRecorder) SetUserEmailVerified(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserEmailVerified", reflect.TypeOf((*MockUserRepo)(nil).SetUserEmailVerified), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockUserRepo) UpdateUser(ctx context.Context, user database.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepoMockRecorder) UpdateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepo)(nil).UpdateUser), ctx, user)
}

// MockEmailSender is a mock of EmailSender interface.
type MockEmailSender struct {
	ctrl     *gomock.Controller
	recorder *MockEmailSenderMockRecorder
	isgomock struct{}
}

// MockEmailSenderMockRecorder is the mock recorder for MockEmailSender.
type MockEmailSenderMockRecorder struct {
	mock *MockEmailSender
}

// NewMockEmailSender creates a new mock instance.
func NewMockEmailSender(ctrl *gomock.Controller) *MockEmailSender {
	mock := &MockEmailSender{ctrl: ctrl}
	mock.recorder = &MockEmailSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailSender) EXPECT() *MockEmailSenderMockRecorder {
	return m.recorder
}

// SendEmailVerification mocks base method.
func (m *MockEmailSender) SendEmailVerification(ctx context.Context, req mailersend.SendEmailVerificationRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailVerification", ctx, req)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailVerification indicates an expected call of SendEmailVerification.
func (mr *MockEmailSenderMockRecorder) SendEmailVerification(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailVerification", reflect.TypeOf((*MockEmailSender)(nil).SendEmailVerification), ctx, req)
}
